# -*- coding: utf-8 -*-
"""Task5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EdZQLjeDswsHjg5Q1Vml7rddMAPTPUfl
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/heart.csv')


print(data.head())


# Separate features and target variable
X = data.drop('target', axis=1)
y = data['target']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Feature Selection using PCA
pca = PCA(n_components=0.95)  # Retain 95% of the variance
X_pca = pca.fit_transform(X_scaled)

print(f"Original number of features: {X.shape[1]}")
print(f"Reduced number of features after PCA: {X_pca.shape[1]}")

# Feature Selection using Feature Importance from RandomForest
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X, y)

# Get feature importances and select the most important ones
selector = SelectFromModel(clf, threshold='median', prefit=True)
X_important = selector.transform(X)

print(f"Number of features selected by importance: {X_important.shape[1]}")

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_important, y, test_size=0.2, random_state=42)

# Train a model with the selected features
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy with selected features: {accuracy:.2f}")


# Train-test split for PCA reduced features
X_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(X_pca, y, test_size=0.2, random_state=42)

# Train a model with PCA features
model_pca = RandomForestClassifier(n_estimators=100, random_state=42)
model_pca.fit(X_train_pca, y_train_pca)

# Predictions with PCA features
y_pred_pca = model_pca.predict(X_test_pca)

# Evaluate the PCA model
accuracy_pca = accuracy_score(y_test_pca, y_pred_pca)
print(f"Accuracy with PCA features: {accuracy_pca:.2f}")

